PP1)
arr.sort((a,b)=>b-a);

PP2)
books.sort((a,b)=>a.published-b.published);

PP3)
arr1[2][1][3]
arr2[1].third[0]
arr3[2].third[0][0]
obj1.b[1]
Object.keys(obj2.third)[0]

PP4)
arr1[1][1]=4
arr2[2]=4
obj1['first'][2][0]=4
obj2['a']['a'][2]=4

PP5)
Object.values(munsters).reduce((total,member)=>member.gender==="male"?total+member.age:total,0);

PP6)
Object.keys(munsters).forEach(member=>console.log(`${member} is a ${munsters[member].age}-year-old ${munsters[member].gender}.`))

PP7)
a=2;
b=[3,8];
arr = [4,[3,8]];

PP8)
Object.values(obj).forEach(arr=>arr.forEach(str=>str.split('').forEach(letter=>"AEIOUaeiou".includes(letter)?console.log(letter):undefined)))

PP9)
arr.map(arr=>typeof(arr[0])==='string'?arr.slice().sort():arr.slice().sort((a,b)=>a-b));

PP10)
arr.map(arr=>typeof(arr[0])==='string'?arr.slice().sort().reverse():arr.slice().sort((a,b)=>b-a));

PP11)
arr.map(obj=>Object.fromEntries(Object.entries(obj).map(arr=>[arr[0],arr[1]+1])));

PP12)
const copy = JSON.parse(JSON.stringify(arr));

PP13)
const truthinessCopy = {};
for(key in truthiness){
  truthinessCopy[key]=[...truthiness[key]];
}

PP14)
arr.map(subarr=>subarr.filter(elem=>elem%3===0));

PP15)
arr.sort((subarr1,subarr2)=>subarr1.reduce((total,elem)=>elem%2!==0?total+elem:total,0)-subarr2.reduce((total,elem)=>elem%2!==0?total+elem:total,0))

PP16)
function PP16(){
  return Object.values(obj).map(food=>food.type==="fruit"?food.colors.map(color=>color[0].toUpperCase()+color.slice(1).toLowerCase()):food.size.toUpperCase());
}

PP17)
arr.filter(obj=>Object.values(obj).every(subarr=>subarr.every(elem=>elem%2===0)));

PP18)
Object.fromEntries(arr);

PP19)
Object.values(Object.freeze(JSON.parse(JSON.stringify(munsters)))).forEach(member=>Object.freeze(member))

PP20)
function PP20(){
  const HEXA_VAL = '0123456789abcdef'
  let separator = [8,4,4,4,12]
  let UUID = []
  for(seg of separator){
    for(a=0;a<seg;a++){
      UUID.push(HEXA_VAL[Math.floor(Math.random()*HEXA_VAL.length)])
    }
    if(seg!==separator[separator.length-1]){ UUID.push('-');}
  }
  return UUID.join('');
}
